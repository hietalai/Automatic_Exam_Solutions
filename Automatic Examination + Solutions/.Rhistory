summary(model)
model$net.result
model
model <- neuralnet(formula = form, data = wine, hidden = 0)
plot(model)
plot(model)
model
model
model$weights
model$net.result
model <- neuralnet(formula = form, data = wine, hidden = 0, act.fct = "sign", linear.output = FALSE)
model <- neuralnet(formula = form, data = wine, hidden = 0,
act.fct = "tanh", linear.output = FALSE)
plot(model)
model$net.result
model
n <- dim(wine)[1]
set.seed(12345)
id <- sample(1:n, floor(n*0.7))
train <- wine[id,]
test <- wine[-id,]
model <- neuralnet(formula = form, data = train)
plot(model)
prediction(x = model, data = test)
prediction(x = model)
pred <- prediction(x = model)
pred$rep1
pred <- predict(x = model)
compute(model, test)
compute(model, test[,-1])
model <- neuralnet(formula = form, data = train, hidden = 1, act.fct = "tanh")
compute(model, test[,-1])
model <- neuralnet(formula = form, data = train, hidden = 1, act.fct = "tanh", err.fct = "ce")
wine <- read.csv(file = "D:/Dropbox/Jobb/2015 LiU/Kurser/Machine Learning/732A52 - Machine Learning/2015/Exam/wine.csv")
wine[, -1] <- scale(wine[,-1])
wine$class[wine$class == 2] <- 0
n <- dim(wine)[1]
set.seed(12345)
id <- sample(1:n, floor(n*0.7))
train <- wine[id,]
test <- wine[-id,]
model <- neuralnet(formula = form, data = train, hidden = 1, act.fct = "tanh", err.fct = "ce")
model <- neuralnet(formula = form, data = train, hidden = 1, act.fct = "logistic", err.fct = "ce")
model <- neuralnet(formula = form, data = train, hidden = 0, act.fct = "tanh", linear.output = FALSE)
compute(model, test[,-1])
wine <- read.csv(file = "D:/Dropbox/Jobb/2015 LiU/Kurser/Machine Learning/732A52 - Machine Learning/2015/Exam/wine.csv")
str(wine)
wine[, -1] <- scale(wine[,-1])
# 1
wine$class[wine$class == 2] <- -1
# 2
n <- dim(wine)[1]
set.seed(12345)
id <- sample(1:n, floor(n*0.7))
train <- wine[id,]
test <- wine[-id,]
model <- neuralnet(formula = form, data = train, hidden = 0, act.fct = "tanh", linear.output = FALSE)
compute(model, test[,-1])
plot(model)
model$weights
which(max(model$weights))
which(model$weights == max(model$weights))
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 0, act.fct = "tanh", linear.output = FALSE)
weights <- unlist(model$weights)
weights
which(model$weights == max(model$weights))
which(weights == max(weights))
colnames(wine[,-1])[which(weights == max(weights))]
plot(model)
colnames(wine[,-1])[which(weights == max(weights)) - 1]
rownames(weights) <- paste("bias", colnames(wine[,-1]))
weights <- as.data.frame(unlist(model$weights))
rownames(weights) <- paste("bias", colnames(wine[,-1]))
paste("bias", colnames(wine[,-1]))
rownames(weights) <- append("bias", colnames(wine[,-1]))
weights
View(wine)
train[,-1] <- scale(train[,-1])
test[,-1] <- scale(test[,-1])
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 0,
act.fct = "tanh", linear.output = FALSE)
weights <- as.data.frame(unlist(model$weights))
rownames(weights) <- append("bias", colnames(wine[,-1]))
weights
model <- neuralnet(formula = form, data = train, hidden = 0)
weights <- as.data.frame(unlist(model$weights))
rownames(weights) <- append("bias", colnames(wine[,-1]))
weights
model
compute(model, test[,-1])
model <- neuralnet(formula = form, data = train, hidden = 0,
act.fct = "tanh", linear.output = FALSE)
weights <- as.data.frame(unlist(model$weights))
rownames(weights) <- append("bias", colnames(wine[,-1]))
weights
# 4
compute(model, test[,-1])
sign(compute(model, test[,-1])$net.result)
pred_train <- sign(model$net.result)
model$net.result
pred_train <- sign(unlist(model$net.result))
pred_train
pred_test <- sign(compute(model, test[,-1])$net.result)
misclassification <- function(y_hat, y){
p <- prop.table(table(y_hat, y))
misclass <- 1 - sum(diag(p))
return(misclass)
}
misclassification(y_hat = pred_train, y = train[,1])
misclassification(y_hat = pred_test, y = test[,1])
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 1,
act.fct = "tanh", linear.output = TRUE)
plot(model)
pred_train <- sign(unlist(model$net.result))
pred_test <- sign(compute(model, test[,-1])$net.result)
misclassification(y_hat = pred_train, y = train[,1])
misclassification(y_hat = pred_test, y = test[,1])
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 2,
act.fct = "tanh", linear.output = TRUE)
plot(model)
pred_train <- sign(unlist(model$net.result))
pred_test <- sign(compute(model, test[,-1])$net.result)
misclassification(y_hat = pred_train, y = train[,1])
misclassification(y_hat = pred_test, y = test[,1])
# 5
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 3,
act.fct = "tanh", linear.output = TRUE)
plot(model)
pred_train <- sign(unlist(model$net.result))
pred_test <- sign(compute(model, test[,-1])$net.result)
misclassification(y_hat = pred_train, y = train[,1])
misclassification(y_hat = pred_test, y = test[,1])
wine <- read.csv(file = "D:/Dropbox/Jobb/2015 LiU/Kurser/Machine Learning/732A52 - Machine Learning/2015/Exam/wine.csv")
# 2
n <- dim(wine)[1]
set.seed(12345)
id <- sample(1:n, floor(n*0.7))
train <- wine[id,]
test <- wine[-id,]
train[,-1] <- scale(train[,-1])
test[,-1] <- scale(test[,-1])
# 3
form <- paste("class ~ ",
paste(colnames(wine)[c(-1, -length(colnames(wine)))], "+", collapse = " "),
colnames(wine)[length(colnames(wine))])
form <- as.formula(form)
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 0,
act.fct = "tanh", linear.output = FALSE)
weights <- as.data.frame(unlist(model$weights))
rownames(weights) <- append("bias", colnames(wine[,-1]))
weights
pred_train <- sign(unlist(model$net.result))
pred_test <- sign(compute(model, test[,-1])$net.result)
misclassification <- function(y_hat, y){
p <- prop.table(table(y_hat, y))
misclass <- 1 - sum(diag(p))
return(misclass)
}
misclassification(y_hat = pred_train, y = train[,1])
misclassification(y_hat = pred_test, y = test[,1])
# 5
set.seed(12345)
model <- neuralnet(formula = form, data = train, hidden = 3,
act.fct = "tanh", linear.output = TRUE)
plot(model)
pred_train <- sign(unlist(model$net.result))
pred_test <- sign(compute(model, test[,-1])$net.result)
misclassification(y_hat = pred_train, y = train[,1])
misclassification(y_hat = pred_test, y = test[,1])
require(mvtnorm)
rmvnorm(n = 100, mean = c(177.9, 165.5))
rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = c(10, 12))
rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(10, 12))
diag(10, 12)
rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(10, 12)))
data <- rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(10, 12)))
hist(data)
hist(data[,1])
hist(data[,2])
length/100
length <- rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(10, 12)))
length/100
weight <- (length/100)^2 *21.5
weight
weight <- (length/100)^2 *21.5 + rnorm(1, mean = 0, sd = 5)
weight
weight <- (length/100)^2 *21.5 + rnorm(1, mean = 0, sd = 4)
weight
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(5, 3)))
w
weight
hist(weigth[,1])
hist(weight[,1])
hist(weight[,2])
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(10, 10)))
hist(weight[,1])
hist(weight[,2])
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(20, 10)))
hist(weight[,1])
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(20, 10)))
hist(weight[,1])
hist(height[,1])
hist(length[,1])
length <- rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(15, 12)))
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(20, 10)))
hist(length[,1])
hist(weight[,1])
length <- rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(20, 12)))
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(20, 10)))
hist(length[,1])
length <- rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(25, 12)))
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(20, 10)))
hist(length[,1])
hist(weight[,1])
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(40, 10)))
hist(length[,1])
hist(weight[,1])
hist(weight[,2])
rmvnorm(100, mean = c(0,0), sigma = diag(c(40, 10)))
length <- rmvnorm(n = 100, mean = c(177.9, 165.5), sigma = diag(c(40, 35)))
weight <- (length/100)^2 *21.5 + rmvnorm(100, mean = c(0,0), sigma = diag(c(40, 35)))
hist(length[,1])
hist(weight[,1])
hist(weight[,2])
lengths <- append(length[,1], length[,2])
weights <- append(weight[,1], weight[,2])
gender <- rep(c(2, 1), each = 100)
data <- data.frame(längd = lengths, vikt = weights, kön = gender)
data <- data.frame(längd = round(lengths, 1),
vikt = round(weights, 1),
kön = gender)
View(data)
write.table(x = data, file = "./data1.txt", row.names = FALSE)
write.table(x = data, file = "D:/Dropbox/Jobb/2015 LiU/Kurser/Grundkurser i statistik/732G01 - Grundläggande statistik/2016/4. Datorövningar/data1.txt", row.names = FALSE)
x <- floor(runif(n = 10, min = 50, max = 100))
set.seed(113480)
x <- floor(runif(n = 10, min = 50, max = 100))
xtable(x)
require(xtable)
xtable(x)
x <- data.frame(floor(runif(n = 10, min = 50, max = 100)))
xtable(x)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
cat(x)
mean(x)
sd(x)
35*72.6
qt(p = 0.95, df = 10-1)
qnorm(p = 0.95)
35*72.6-qt(p = 0.95, df = 10-1)*35*sqrt((sd(x)^2/10)*(1-10/35))
set.seed(4156890)
set <- floor(runif(2, 10, 100))
m <- set[1]
k <- set[2]
set.seed(4156890)
set <- floor(runif(2, 10, 20))
m <- set[1]
k <- set[2]
set.seed(4156890)
set <- floor(runif(2, 5, 10))
m <- set[1]
k <- set[2]
```
En by i Norrbotten har av `r m+k` varav `r m` är män och `r k` är kvinnor.
set.seed(4156890)
set <- round(runif(1, 0, 1), 3)
prob <- round(runif(1, 0, 1), 3)
set.seed(4156890)
prob <- round(runif(1, 0, 1), 3)
1000*prob*(1-prob)
freq <- matrix(floor(runif(n = 6, min = 0, max = 40)), nrow = 2)
set.seed(9483)
freq <- matrix(floor(runif(n = 6, min = 0, max = 40)), nrow = 2)
freq
set.seed(9483)
freq <- matrix(floor(runif(n = 9, min = 0, max = 40)), nrow = 3)
colnames(freq) <- c("A", "B", "C")
rownames(freq) <- c("Yngre", "Medel", "Äldre")
freq
O <- freq
E <- O
for(i in 1:nrow(E)){
E[i,] <- colSums(O)*sum(E[i,])/sum(O)
}
E
chisqtest <- sum((O-E)^2/E)
chisqcrit <- qchisq(0.95, (nrow(O)-1)*(ncol(O)-1))
10/(10+20+38)
(10+20+38)
10/(10+20+38) * 68
data <- data.frame(ovre_n, ovre_u, nedre_n, nedre_u)
ovre_u <- c(2458.12, 195.76, 152.54)
nedre_u <- c(2782.69, 254.81, 98.65)
ovre_n <- c(75, 98, 32)
nedre_n <- c(94, 92, 12)
data <- data.frame(ovre_n, ovre_u, nedre_n, nedre_u)
data
10*142
10*142 / 60
betyg <- c(1, 2, 3, 4, 5)
antal <- c(0, 3, 15, 34, 17)
data <- data.frame(betyg, antal)
colnames(data) <- c("Betyg", "Antal")
print(xtable(data, digits = c(1, 0, 0)), comment = FALSE)
sum(antal)
antal <- c(0, 5, 19, 34, 24)
sum(antal)
set.seed(41560)
prob <- round(runif(1, 0, 1), 3)
set.seed(415602)
prob <- round(runif(1, 0, 1), 3)
set.seed(41560123)
prob <- round(runif(1, 0, 1), 3)
require(xtable)
betyg <- c(1, 2, 3, 4, 5)
antal <- c(0, 5, 19, 34, 24)
data <- data.frame(betyg, antal)
colnames(data) <- c("Betyg", "Antal")
print(xtable(data, digits = c(1, 0, 0)), row.names = FALSE, comment = FALSE)
print(xtable(data, digits = c(1, 0, 0)), include.rownames = FALSE, comment = FALSE)
packages <- c("GGally",
"GGplot2",
"xtable",
"rmarkdown",
"mvtnorm")
install.packages(packages)
100/60
install.packages(knitr)
install.packages("knitr")
require(xtable)
data(iris)
plot(iris[['Sepal.Length']], iris[['Sepal.Width']])
data(iris)
plot(iris[['Sepal.Length']], iris[['Sepal.Width']], xlab = "length", ylab = "width")
data(iris)
plot(iris[['Sepal.Length']], iris[['Sepal.Width']], xlab = "length", ylab = "width", type = "l")
data(iris)
plot(iris[['Sepal.Length']], iris[['Sepal.Width']], xlab = "length", ylab = "width", type = "p")
data(iris)
plot(iris[['Sepal.Length']], iris[['Sepal.Width']], xlab = "length", ylab = "width", pch = "p")
data(iris)
plot(iris[['Sepal.Length']], iris[['Sepal.Width']], xlab = "length", ylab = "width", pch = ".")
pnorm(1.96, 0, 1)
dnorm(1.96, 0, 1)
dnorm(19.6, 0, 10)
pnorm(19.6, 0, 10)
source('D:/Dropbox/Jobb/LiU/Kurser/0. R-funktioner/normal diagram.R', echo=TRUE)
normal(test = -20, crit = qnorm((10-2.5)/10))
require(ggplot2)
source('D:/Dropbox/Jobb/LiU/Kurser/0. R-funktioner/normal diagram.R', echo=TRUE)
normal(test = -20, crit = qnorm((10-2.5)/10))
require(ggplot2)
install.packages("ggplot2")
require(ggplot2)
normal(test = -20, crit = qnorm((10-2.5)/10))
0.77337-0.10565
n <- 10
N <- 35
seed <- 113480
require(xtable)
set.seed(seed)
x <- floor(runif(n = n, min = 50, max = 100))
cat(x)
sum(x^2)
sd(x)
mean(x)
pt(q = 0.95, df = 9)
qt(p = 0.95, df = 9)
N * mean(x)- qt(p = 0.95, df = n-1) * N * sqrt(round(sd(x),3)^2/n * (1-(n/N))
dbinom(x = c(0, 1), size = 5, prob = prob)
set.seed(41560123)
prob <- round(runif(1, 0, 1), 3)
dbinom(x = c(0, 1), size = 5, prob = prob)
sum(dbinom(x = c(0, 1), size = 5, prob = prob))
qnorm((500 - 1000*prob) / sqrt(1000*prob*(1-prob)))
qnorm(-39)
pnorm(-39)
3.752 + 0.422*25
0.422/.083
7.269*45
sqrt(7.269)
dbinom(x = 2, 5, prob)
require(xtable)
set.seed(9483)
freq <- matrix(floor(runif(n = 9, min = 0, max = 40)), nrow = 3)
colnames(freq) <- c("A", "B", "C")
rownames(freq) <- c("Yngre", "Medel", "Äldre")
# print(xtable(freq, digits = c(1, 0, 0, 0)), comment = FALSE)
O <- freq
E <- O
for(i in 1:nrow(E)){
E[i,] <- colSums(O)*sum(E[i,])/sum(O)
}
# print(xtable(O, digits = c(1, 0, 0, 0, 0), caption = "Observerade frekvenser"), comment = FALSE)
# print(xtable(E, digits = c(1, 3, 3, 3), caption = "Förväntade frekvenser, avrundat till tre decimaler"), comment = FALSE)
# Correct answer
chisqtest <- sum((freq-E)^2/E)
chisqcrit <- qchisq(0.95, (nrow(freq)-1)*(ncol(freq)-1))
68+71
ny*py*(1-py)
py <- 10/68
pm <- 12/71
pp <- 22/139
ny <- 68
nm <- 71
py <- 10/68
pm <- 12/71
pp <- 22/139
ny <- 68
nm <- 71
ny*py*(1-py)
nm*pm*(1-pm)
ovre_u <- c(458.12, 195.76, 152.54)
nedre_u <- c(782.69, 254.81, 98.65)
ovre_n <- c(75, 98, 32)
nedre_n <- c(94, 92, 12)
data <- data.frame(ovre_n, ovre_u, nedre_n, nedre_u)
ovre_u*ovre_n
data <- data.frame(ovre_n, ovre_u, nedre_n, nedre_u)
xbaro <- sum(ovre_u*ovre_n)/sum(ovre_n)
xbarn <- sum(nedre_u*nedre_n)/sum(nedre_n)
s2o <- (sum(ovre_u^2*ovre_n) - sum(ovre_u*ovre_n)^2/sum(ovre_n))/(sum(ovre_n)-1)
s2n <- (sum(nedre_u^2*nedre_n) - sum(nedre_u*nedre_n)^2/sum(nedre_n))/(sum(nedre_n)-1)
n_standard <- ovre_n + nedre_n
n_standard
betyg <- c(1, 2, 3, 4, 5)
antal <- c(0, 5, 19, 34, 24)
data <- data.frame(betyg, antal)
colnames(data) <- c("Betyg", "Antal")
sum(antal)
sum(antal)/2
(sum(antal)+1)/2
0+5+19
0+5+19+34
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
0+5+19+34
round(runif(1), 2)
seed <- 91278346
prob <- round(runif(1), 2)
binomial <- function(){}
source("probability_solver.R")
setwd("D:/Dropbox/Jobb/LiU/Kurser/0. Automatisk tentamen")
source("probability_solver.R")
cat(paste("$$ X \sim bin(n = ", n, "; \pi = ", pi,"$$"))
cat(paste("$$ X \\sim bin(n = ", n, "; \\pi = ", pi,"$$"))
source("probability_solver.R")
### Information generation
prob <- 0.02
n1 <- 31
n2 <- 365*3
poisson(pi = prob, n = n2, x = 10, side = "le", approx = TRUE)
cat(paste("$$ X \\approx po(\\mu = n*\\pi =", n*pi, ") $$"))
poisson(pi = prob, n = n2, x = 10, side = "le", approx = TRUE)
source("probability_solver.R")
poisson(pi = prob, n = n2, x = 10, side = "le", approx = TRUE)
cat(paste("$$ Pr(X \\", side, x, ") $$"))
floor(rnorm(8, mean = 5, sd = 2))
floor(rnorm(8, mean = 5, sd = 4))
floor(rnorm(8, mean = 5, sd = 3))
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
seed <- 234567
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
seed <- 2345678
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
seed <- 2345679
x <- floor(rnorm(8, mean = 5, sd = 3))
set.seed(seed)
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
seed <- 2345623
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
seed <- 23456
set.seed(seed)
x <- floor(rnorm(8, mean = 5, sd = 3))
y <- x + floor(rnorm(length(x)))
y <- x + floor(rnorm(length(x), sd = 2))
set.seed(seed)
y <- x + floor(rnorm(length(x), sd = 2))
set.seed(seed)
y <- 2.4*x + floor(rnorm(length(x), sd = 2))
set.seed(seed)
y <- 2*x + floor(rnorm(length(x), sd = 2))
y <- 3*x + floor(rnorm(length(x), sd = 2))
data <- rbind(x, y)
data
data <- as.data.frame(rbind(x, y))
xtable(data)
require(xtable)
xtable(data)
colnames(data) <- 1:length(x)
xtable(data)
xtable(data, digits = c(1, rep(0, length(x))))
require(stringr)
x <- "BANANKONTAKT"
str_sub(string = x, start = 1, end = 5)
source(paste(dir, "/probability_solver.R", sep = ""))
dir <- "F:/Dropbox/Jobb/LiU/Kurser/0. Automatisk tentamen"
source(paste(dir, "/probability_solver.R", sep = ""))
View(linear.transformation)
source(paste(dir, "/probability_solver.R", sep = ""))
